mongo:
  aktoMongoConn: ""

kubernetesClusterDomain: cluster.local
threat_client:
  aktoApiSecurityThreatClient:
    env:
      postgresUrl: jdbc:postgresql://my-postgres-postgresql.default.svc.cluster.local:5432/postgres
      postgresUser: postgres
      postgresPassword: UidEjxNjwi
      aktoAccountName: Helios
      aktoConfigName: staging
      aktoInstanceType: DASHBOARD
      aktoKafkaTrafficBrokerUrl: 192.168.1.27:29093
      aktoKafkaBrokerUrl: 127.0.0.1:29092
      backendToken: eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJBa3RvIiwic3ViIjoiaW52aXRlX3VzZXIiLCJhY2NvdW50SWQiOjE2NjI2ODA0NjMsImlhdCI6MTc0NDQ0MjU2NywiZXhwIjoxNzYwMjUzNzY3fQ.AnGAA45ON0ih0rvOVnL1nE75bxObJXWRQ0nHiqEZC_HDV1DfJxIMC6jB1VdSDVz3SfGwik8WoFqsCk0eYuC_yp1wnNNvxbdvEnjOtMaOCL3TjWeNhQPScmiS3moTKeCE7mF_1ZfOadnd6km9EPeXhf2NoLWbw83UEcfHHRt6dwx91Wh-emESQeJPa5IH7N36qqaFDl8Z92xIpTNt9-D6V0h19EeeCccanpKOjiq9Chj_UBMetkkP0vdtNdlompivLNQ53EIVCHKVkfwg-sA4KT9KdHwlLC2VsnqmDiTH8aThBjieXqgl1HLAiKAgiaNITFJPR2f0V9uI00mw5Dk-hA
      backendUrl: https://tbs.akto.io
      aktoLogLevel: DEBUG
      useHostName: true
    image:
      repository: aktosecurity/akto-threat-detection
      tag: logtest
    imagePullPolicy: Always
    resources:
      requests:
        cpu: 500m
        memory: "512Mi"
      limits:
        cpu: 1
        memory: "1Gi"
  kafka1:
    env:
      # add advertised listeners if you want to override the default listeners
      kafkaAdvertisedListeners: ""
      kafkaBrokerId: "1"
      kafkaCleanupPolicy: delete
      kafkaCreateTopics: akto.api.logs:3:3
      kafkaInterBrokerListenerName: LISTENER_DOCKER_EXTERNAL_LOCALHOST
      kafkaListenerSecurityProtocolMap: LISTENER_DOCKER_EXTERNAL_LOCALHOST:PLAINTEXT,
        LISTENER_DOCKER_EXTERNAL_DIFFHOST:PLAINTEXT
      kafkaLogCleanerEnable: "true"
      kafkaLogRetentionBytes: "10737418240"
      kafkaLogRetentionCheckIntervalMs: "60000"
      kafkaLogRetentionHours: "5"
      kafkaLogSegmentBytes: "104857600"
      kafkaOffsetsTopicReplicationFactor: "1"
      kafkaTransactionStateLogMinIsr: "1"
      kafkaTransactionStateLogReplicationFactor: "1"
      kafkaZookeeperConnect: 127.0.0.1:2181
    image:
      repository: confluentinc/cp-kafka
      tag: 7.8.0-3-ubi8
    resources:
      requests:
        cpu: 500m
        memory: "500Mi"
      limits:
        cpu: 1
        memory: "800Mi"
  ports:
  - port: 9092
    targetPort: 9092
  replicas: 1
  type: ClusterIP
  zoo1:
    env:
      kafkaOpts: -Dzookeeper.admin.enableServer=false
      zookeeperClientPort: "2181"
      zookeeperServerId: "1"
      zookeeperServers: zoo1:2888:3888
    image:
      repository: confluentinc/cp-zookeeper
      tag: 7.8.0-3-ubi8
    resources:
      requests:
        cpu: 400m
        memory: "400Mi"
      limits:
        cpu: 600m
        memory: "600Mi"

redis:
  image:
    repository: redis
    tag: "7.0"
    pullPolicy: IfNotPresent
  resources:
    requests:
      cpu: "500m"
      memory: "512Mi"
    limits:
      cpu: "900m"
      memory: "900Mi"

keel:
  keel:
    env:
      awsAccessKeyId: ""
      awsRegion: ""
      awsSecretAccessKey: ""
      hipchatApprovalsBotName: ""
      hipchatApprovalsChannel: ""
      hipchatApprovalsPasswort: ""
      hipchatApprovalsUserName: ""
      hipchatChannels: ""
      hipchatToken: ""
      insecureRegistry: "true"
      mattermostEndpoint: ""
      notificationLevel: info
      webhookEndpoint: ""
    image:
      repository: keelhq/keel
      tag: latest
    imagePullPolicy: Always
    enabled: false
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi
  maxUnavailable: 1
  ports:
  - name: keel
    port: 9300
    protocol: TCP
    targetPort: 9300
  replicas: 1
  serviceAccount:
    annotations: {}
  type: LoadBalancer
