apiVersion: apps/v1
kind: Deployment
metadata:
  name: my-app-deployment
  namespace: dev3
spec:
  replicas: 1
  selector:
    matchLabels:
      app: my-app
  template:
    metadata:
      labels:
        app: my-app
    spec:
      containers:
      - name: my-app-container
        image: hotavneesh/juiceshop:latest
        ports:
        - containerPort: 3000
---
apiVersion: v1
kind: Service
metadata:
  name: my-app-service
  namespace: dev3
spec:
  selector:
    app: my-app
  ports:
    - protocol: TCP
      port: 3000
      targetPort: 3000
  type: ClusterIP
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: nginx-deployment
  namespace: dev3
spec:
  replicas: 1
  selector:
    matchLabels:
      app: nginx
  template:
    metadata:
      labels:
        app: nginx
    spec:
      containers:
      - name: nginx-container
        image: coastaldemigod/nginx-amazon-linux
        ports:
        - containerPort: 80
        volumeMounts:
        - name: nginx-config
          mountPath: /etc/nginx/nginx.conf
          subPath: nginx.conf
      volumes:
      - name: nginx-config
        configMap:
          name: nginx-config
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: nginx-config
  namespace: dev3
data:
  nginx.conf: |
    user  nginx;
    worker_processes  auto;

    error_log  /var/log/nginx/error.log notice;
    pid        /var/run/nginx.pid;
    load_module /etc/nginx/modules/ngx_http_js_module.so;
    load_module /etc/nginx/modules/ngx_http_kafka_log_module.so;

    events {
        worker_connections  1024;
    }

    http {
      include       /etc/nginx/mime.types;
      default_type  application/octet-stream;

      log_format  main  '$remote_addr - $remote_user [$time_local] "$request" '
                        '$status $body_bytes_sent "$http_referer" '
                        '"$http_user_agent" "$http_x_forwarded_for"';

      access_log  /var/log/nginx/access.log  main;

      sendfile        on;
      #tcp_nopush     on;

      upstream my_app {
          server my-app-service.dev3.svc.cluster.local:3000;
        }

      keepalive_timeout  65;
      subrequest_output_buffer_size 8k;
      js_path "/etc/nginx/njs/";
      js_var $responseBo "{}";
      js_import main2 from api_log.js;
      kafka_log_kafka_brokers "10.0.155.127:9092";
      kafka_log_kafka_buffer_max_messages 100000;
      #gzip  on;

      server {
      listen 80;
          location / {
          js_body_filter main2.to_lower_case;
          kafka_log kafka:akto.api.logs $responseBo;
          proxy_pass http://my_app;
          }
        }
    }
---
apiVersion: v1
kind: Service
metadata:
  name: nginx-service
  namespace: dev3
spec:
  selector:
    app: nginx
  ports:
    - protocol: TCP
      port: 80
      targetPort: 80
  type: LoadBalancer