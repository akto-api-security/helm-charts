mongo:
  aktoMongoConn: ""

kubernetesClusterDomain: cluster.local
mini_runtime:
  aktoApiSecurityRuntime:
    env:
      aktoAccountName: Helios
      aktoConfigName: staging
      aktoInstanceType: DASHBOARD
      aktoKafkaBrokerMal: localhost:29092
      aktoKafkaBrokerUrl: 127.0.0.1:29092
      aktoKafkaGroupIdConfig: asdf
      aktoKafkaMaxPollRecordsConfig: "100"
      aktoKafkaTopicName: akto.api.logs
      aktoTrafficBatchSize: "100"
      aktoTrafficBatchTimeSecs: "10"
      aktoLogLevel: WARN
      puppeteerReplayServiceUrl: http://akto-puppeteer-replay:3000
      useHostName: true
      databaseAbstractorUrl: https://cyborg.akto.io
      # If you want to use secrets to store database abstractor token. default: false
      useSecretsForDatabaseAbstractorToken: false
      # If not using secrets, place token here.
      databaseAbstractorToken: ""
      # If using secrets, place token here.
      databaseAbstractorTokenSecrets: 
        # Name of an existing secret containing the Database Abstractor Token
        existingSecret: ""
        # Token to use if existingSecret is not provided
        token: ""
    image:
      repository: public.ecr.aws/aktosecurity/akto-api-security-mini-runtime
      tag: latest
    imagePullPolicy: Always
    resources:
      requests:
        cpu: 2
        memory: "4Gi"
      limits:
        cpu: 3
        memory: "8Gi"
  kafka1:
    env:
      # add advertised listeners if you want to override the default listeners
      kafkaAdvertisedListeners: ""
      kafkaBrokerId: "1"
      kafkaCleanupPolicy: delete
      kafkaCreateTopics: akto.api.logs:3:3
      kafkaInterBrokerListenerName: LISTENER_DOCKER_EXTERNAL_LOCALHOST
      kafkaListenerSecurityProtocolMap: LISTENER_DOCKER_EXTERNAL_LOCALHOST:PLAINTEXT, LISTENER_DOCKER_EXTERNAL_DIFFHOST:PLAINTEXT
      kafkaListenerSecurityProtocolMapSsl: LISTENER_DOCKER_EXTERNAL_LOCALHOST:PLAINTEXT, LISTENER_DOCKER_EXTERNAL_DIFFHOST:PLAINTEXT, LISTENER_DOCKER_EXTERNAL_DIFFHOST_ENCRYPTED:SSL
      kafkaLogCleanerEnable: "true"
      kafkaLogRetentionBytes: "10737418240"
      kafkaLogRetentionCheckIntervalMs: "60000"
      kafkaLogRetentionHours: "5"
      kafkaLogSegmentBytes: "104857600"
      kafkaOffsetsTopicReplicationFactor: "1"
      kafkaTransactionStateLogMinIsr: "1"
      kafkaTransactionStateLogReplicationFactor: "1"
      kafkaZookeeperConnect: 127.0.0.1:2181
      sslKeystoreLocation: "/etc/kafka/secrets/server.keystore.jks"
      sslKeystorePassword: "password"
      sslKeyPassword: "password"
      sslTruststoreLocation: "/etc/kafka/secrets/server.truststore.jks"
      sslTruststorePassword: "password"
      sslBaseMountPath: "/etc/kafka/secrets"
      sslSecretName: "kafka-certs"
    useTls: false
    image:
      repository: confluentinc/cp-kafka
      tag: 7.9.1-1-ubi8
    resources:
      requests:
        cpu: 1
        memory: "4Gi"
        ephemeral-storage: "500Mi"
      limits:
        cpu: 2
        memory: "8Gi"
        ephemeral-storage: "11Gi"
  ports:
    default:
      - port: 9092
        targetPort: 9092
    tls:
      - name: plaintext
        port: 9092
        targetPort: 9092
      - name: ssl
        port: 9093
        targetPort: 9093

  replicas: 1
  type: ClusterIP
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-internal: "true"
  zoo1:
    env:
      kafkaOpts: -Dzookeeper.admin.enableServer=false
      zookeeperClientPort: "2181"
      zookeeperServerId: "1"
      zookeeperServers: zoo1:2888:3888
    image:
      repository: confluentinc/cp-zookeeper
      tag: 7.9.1-1-ubi8
    resources:
      requests:
        cpu: 1
        memory: "1Gi"
      limits:
        cpu: 2
        memory: "2Gi"

keel:
  keel:
    env:
      awsAccessKeyId: ""
      awsRegion: ""
      awsSecretAccessKey: ""
      hipchatApprovalsBotName: ""
      hipchatApprovalsChannel: ""
      hipchatApprovalsPasswort: ""
      hipchatApprovalsUserName: ""
      hipchatChannels: ""
      hipchatToken: ""
      insecureRegistry: "true"
      mattermostEndpoint: ""
      notificationLevel: info
      webhookEndpoint: ""
    image:
      repository: keelhq/keel
      tag: latest
    imagePullPolicy: IfNotPresent
    enabled: true
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi
  maxUnavailable: 1
  ports:
  - name: keel
    port: 9300
    protocol: TCP
    targetPort: 9300
  replicas: 1
  serviceAccount:
    annotations: {}
  type: LoadBalancer

ports:
  default:
    - port: 9092
      targetPort: 9092
  tls:
    - name: plaintext
      port: 9092
      targetPort: 9092
    - name: ssl
      port: 9093
      targetPort: 9093

threat_client:
  aktoApiSecurityThreatClient:
    env:
      enabled: true
      aggregationRulesEnabled: false
      postgresUrl: jdbc:postgresql://postgres.default.svc.cluster.local:5432/akto
      postgresUser: akto
      postgresPassword: akto
      aktoAccountName: Helios
      aktoConfigName: staging
      aktoInstanceType: DASHBOARD
      aktoKafkaTrafficBrokerUrl:
      aktoKafkaBrokerUrl:
      backendUrl: https://tbs.akto.io
      aktoLogLevel: WARN
      useHostName: true
    image:
      repository: aktosecurity/akto-threat-detection
      tag: latest
    imagePullPolicy: Always
    resources:
      requests:
        cpu: 1
        memory: "1Gi"
      limits:
        cpu: 2
        memory: "2Gi"

redis:
  image:
    repository: redis
    tag: "7.0"
    pullPolicy: IfNotPresent
  resources:
    requests:
      cpu: "500m"
      memory: "500Mi"
    limits:
      cpu: "900m"
      memory: "1500Mi"
  persistence:
    enabled: false
    size: "2Gi"
    storageClass: ""
