tokens:
  env:
    proxyUri: ""
    noProxy: ""

testing:
  aktoApiSecurityTesting:
    env:
      aktoAccountName: Helios
      aktoConfigName: staging
      newTestingEnabled: "true"
      kafkaBrokerUrl: localhost:29092
      puppeteerReplayServiceUrl: http://localhost:3000
      databaseAbstractorUrl: http://host.docker.internal:5678
      databaseAbstractorToken: "eyJhbGciOiJSUzI1NiJ9.eyJpc3MiOiJBa3RvIiwic3ViIjoiaW52aXRlX3VzZXIiLCJhY2NvdW50SWQiOjE3NTAwMTk5ODksImlhdCI6MTc1Mzg3MjcxNSwiZXhwIjoxNzY5NzcwMzE1fQ.MWketh9JXhIvD63PB4Oz8IXTyA26YadDrZ0S0JslnRTK_qdg9GXIqribnFKfXux0RljZvgR9jK4vWvh40jTmNQgc6Ab_fbCwbaBlaFKrJ_sv1UqtbEleolgk4KEcyGmEvOpmgi06UnlqcVowxf44HVrWfo-VJXuSYXqWn8v8c9JdkZwYA8vUvMpl_6T9Egr6RnoneS2CVMrUnb6kqnxqLLB1FNzG8cH_x9MA8QZdufqu0o0tsIMuN1FKRDE0P54rU9stO8ZVRyIaD5UAOuBYnu56krcTejh12CQbhWrupqHxMmyRQ4SfaVshOshjx8TUOGxj8zhHja99o6U-bIYYNg"
      blockLogs: "false"
      aktoLogLevel: INFO
      miniTestingName: System-auto-scaled-akto-mini-testing

    image:
      repository: public.ecr.aws/aktosecurity/akto-api-security-mini-testing
      tag: latest
    imagePullPolicy: Always
    resources:
      requests:
        cpu: "200m"
        memory: "400Mi"
      limits:
        cpu: "1"
        memory: "2Gi"

  prometheusServer:
    name: prometheus
    port: 9400
    protocol: TCP
    metricsEndpoint:
      path: /metrics

  kubePrometheus:
    serviceName: prometheus-kube-prometheus-prometheus
    port: 9090
    scrape:
      interval: 15s
      timeout: 10s

  replicas: 1
  autoScaling:
    enabled: false
    minReplicas: 1
    maxReplicas: 10
    customMetrics:
      type: prometheus
      pollingInterval: 30
      cooldownPeriod: 300
      isModuleBusy:
        metricName: is_module_busy
        trigger:
          name: is_module_busy_avg
          target: 0.9
          type: Value

  aktoApiSecurityPuppeteerReplay:
    image:
      repository: public.ecr.aws/aktosecurity/akto-puppeteer-replay
      tag: latest
    imagePullPolicy: Always
    resources:
      requests:
        cpu: 200m
        memory: "500Mi"
      limits:
        cpu: 200m
        memory: "1Gi"

  kafka1:
    env:
      kafkaBrokerId: "1"
      kafkaCleanupPolicy: delete
      kafkaCreateTopics: akto.test.messages:1:1
      kafkaInterBrokerListenerName: LISTENER_DOCKER_EXTERNAL_LOCALHOST
      kafkaListenerSecurityProtocolMap: LISTENER_DOCKER_EXTERNAL_LOCALHOST:PLAINTEXT,
        LISTENER_DOCKER_EXTERNAL_DIFFHOST:PLAINTEXT
      kafkaLogCleanerEnable: "true"
      kafkaLogRetentionBytes: "10737418240"
      kafkaLogRetentionCheckIntervalMs: "60000"
      kafkaLogRetentionHours: "5"
      kafkaLogSegmentBytes: "104857600"
      kafkaOffsetsTopicReplicationFactor: "1"
      kafkaTransactionStateLogMinIsr: "1"
      kafkaTransactionStateLogReplicationFactor: "1"
      kafkaZookeeperConnect: 127.0.0.1:2181
    image:
      repository: public.ecr.aws/aktosecurity/confluentinc-cp-kafka
      tag: 7.8.0-3-ubi8
    resources:
      requests:
        cpu: 200m
        memory: "500Mi"
      limits:
        cpu: 1
        memory: "1Gi"
  ports:
  - port: 9092
    targetPort: 9092
  type: ClusterIP
  zoo1:
    env:
      kafkaOpts: -Dzookeeper.admin.enableServer=false
      zookeeperClientPort: "2181"
      zookeeperServerId: "1"
      zookeeperServers: zoo1:2888:3888
    image:
      repository: public.ecr.aws/aktosecurity/confluentinc-cp-zookeeper
      tag: 7.8.0-3-ubi8
    resources:
      requests:
        cpu: 200m
        memory: "500Mi"
      limits:
        cpu: 200m
        memory: "500Mi"

keel:
  keel:
    env:
      awsAccessKeyId: ""
      awsRegion: ""
      awsSecretAccessKey: ""
      hipchatApprovalsBotName: ""
      hipchatApprovalsChannel: ""
      hipchatApprovalsPasswort: ""
      hipchatApprovalsUserName: ""
      hipchatChannels: ""
      hipchatToken: ""
      insecureRegistry: "true"
      mattermostEndpoint: ""
      notificationLevel: info
      webhookEndpoint: ""
    image:
      repository: public.ecr.aws/aktosecurity/keelhq-keel
      tag: latest
    imagePullPolicy: Always
    resources:
      limits:
        cpu: 100m
        memory: 128Mi
      requests:
        cpu: 50m
        memory: 64Mi
    enabled: true
  maxUnavailable: 1
  ports:
  - name: keel
    port: 9300
    protocol: TCP
    targetPort: 9300
  replicas: 1
  serviceAccount:
    annotations: {}
  type: LoadBalancer
kubernetesClusterDomain: cluster.local
